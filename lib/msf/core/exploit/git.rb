# -*- coding: binary -*-

module Msf

# This mixin provides helper functions for building Git repositories
module Exploit::Git

  def initialize(info = {})
    super

    @repo =
    {
      head: 'ref: refs/heads/master',
      objs: Array.new
    }
  end

  # Generate a commit message using fake names and emails
  def fake_commit_message
    email = Rex::Text.rand_mail_address
    first, last, company = email.scan(/([^\.]+)\.([^\.]+)@(.*)$/).flatten
    full_name = "#{first.capitalize} #{last.capitalize}"
    tstamp = Time.now.to_i
    author_time = rand(tstamp)
    commit_time = rand(author_time)
    tz_off = rand(10)
    commit = "author #{full_name} <#{email}> #{author_time} -0#{tz_off}00\n" \
             "committer #{full_name} <#{email}> #{commit_time} -0#{tz_off}00\n" \
             "\n" \
             "Initial commit to open git repository for #{company}!\n"
    commit
  end

  def build_blob_object(content)
    build_object('blob', content)
  end

  def build_commit_object(full_name = nil, email = nil, tree_sha1)
    full_name ||= Faker::Name.name
    email ||= Faker::Internet.email(name: full_name, separators: ['-', '_'])
    company = Faker::Company.name

    tstamp = Time.now.to_i
    author_time = rand(tstamp)
    commit_time = rand(author_time)
    tz_off = rand(10)
    commit_msg =  "author #{full_name} <#{email}> #{author_time} -0#{tz_off}00\n" \
                  "committer #{full_name} <#{email}> #{commit_time} -0#{tz_off}00\n" \
                  "\n" \
                  "Initial commit to open git repository for #{company}!\n"

    commit = "tree #{tree_sha1}\n#{commit_msg}"
    build_object('commit', commit)
  end

  # Accepts array of hashes where
  # hash consists file name, mode,
  # and sha1 hash for contents of file
  def build_tree_object(tree_entries)
    tree = ''
    tree_entries.each do |entry|
      tree += "#{entry[:mode]} #{entry[:file_name]}\0#{[entry[:sha1]].pack('H*')}"
    end

    build_object('tree', tree)
  end

  # Builds a Git object
  def build_object(type, content)
    # taken from http://schacon.github.io/gitbook/7_how_git_stores_objects.html
    header = "#{type} #{content.size}\0"
    store = header + content
    [Digest::SHA1.hexdigest(store), Zlib::Deflate.deflate(store)]
  end

  # Returns the Git object path name that a file with the provided SHA1 will reside in
  def get_path(sha1)
    sha1[0...2] + '/' + sha1[2..40]
  end

end
end
