module Msf

module Exploit::Git

  SIGNATURE = 'PACK'
  VERSION = 2

  ##
  # object types
  ##
  OBJ_COMMIT    = 1
  OBJ_TREE      = 2
  OBJ_BLOB      = 3
  OBJ_TAG       = 4
  # ?           = 5
  # type 5 is reserved
  # see: https://git-scm.com/docs/pack-format
  OBJ_OFS_DELTA = 6
  OBJ_REF_DELTA = 7

  class Packfile

    include Msf::Exploit::Git

    attr_reader :version, :git_objects, :data

    def initialize(version = nil, objs)
      @version = version.nil? ? VERSION : version.to_i
      @git_objects = objs.kind_of?(Array) ? objs : [ objs ]

      @data = header
      @data << format_objects
    end

    def header
      hdr = SIGNATURE
      hdr << [ @version ].pack('N')
      hdr << [ @git_objects.length ].pack('N')
      hdr
    end

    # Each object has a variable-sized
    # header, with the size being determined
    # by the length of the object's original,
    # uncompressed content
    def format_objects
      type = 0
      obj_stream = Array.new

      @git_objects.each do |obj|
        byte_amt = 0
        size_remain = obj.content.length
        case obj.type          
        when 'blob'
          type = OBJ_BLOB
        when 'tree'
          type = OBJ_TREE
        when 'commit'
          type = OBJ_COMMIT
        end
        
        if size_remain > 15
          byte_amt = 2
          size_remain -= 15
        end

        div = size_remain / 127
        size_remain /= 127
        byte_amt += (div - byte_amt) if (div > byte_amt)
        byte_amt += 1 if (size_remain % 127) > 0

        shift = 0
        (1..byte_amt).each do |byte|
          curr_byte = 0
          # set msb if needed
          if byte < byte_amt
            curr_byte |= 128
          end

          # set the object type
          # set last four bits for content size
          if byte == 1
            curr_byte |= (type << 4)
            curr_byte |= (obj.content.length & 15)
          else
            curr_byte = (obj.content.length >> 4 >> shift) & 127
            shift += 7
          end

          obj_stream << [ curr_byte ].pack('C*')
        end

        obj_stream << obj.compressed
      end

      # add sha1 checksum
      obj_stream = obj_stream.join
      obj_stream << [ Digest::SHA1.hexdigest(obj_stream) ].pack('H*')
    end
  end
end
end
